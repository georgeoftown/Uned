
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 11 20:55:20 BRT 2019
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 11 20:55:20 BRT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\056\002\000\002\002" +
    "\004\000\002\003\004\000\002\004\005\000\002\005\013" +
    "\000\002\006\004\000\002\006\002\000\002\012\004\000" +
    "\002\012\003\000\002\013\006\000\002\014\003\000\002" +
    "\014\003\000\002\007\004\000\002\007\002\000\002\015" +
    "\004\000\002\015\003\000\002\016\015\000\002\010\004" +
    "\000\002\010\002\000\002\017\004\000\002\017\003\000" +
    "\002\020\006\000\002\021\005\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\011\005\000\002\011" +
    "\002\000\002\023\007\000\002\025\005\000\002\025\002" +
    "\000\002\026\005\000\002\026\003\000\002\026\002\000" +
    "\002\027\005\000\002\024\004\000\002\024\002\000\002" +
    "\033\003\000\002\033\003\000\002\033\005\000\002\033" +
    "\003\000\002\034\005\000\002\034\005\000\002\034\003" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\004\000\002\035\003\000\002\030\004\000\002" +
    "\030\003\000\002\030\002\000\002\031\005\000\002\031" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\043\004\000\002" +
    "\042\005\000\002\044\010\000\002\045\004\000\002\045" +
    "\002\000\002\046\013\000\002\037\003\000\002\037\004" +
    "\000\002\040\005\000\002\040\004\000\002\041\005\000" +
    "\002\041\003\000\002\047\006\000\002\050\006\000\002" +
    "\051\003\000\002\036\003\000\002\036\004\000\002\036" +
    "\004\000\002\052\005\000\002\053\003\000\002\053\003" +
    "\000\002\054\003\000\002\054\003\000\002\055\003\000" +
    "\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\012\000\001\002\000\004\002\242\001" +
    "\002\000\004\012\007\001\002\000\004\002\uffff\001\002" +
    "\000\004\004\240\001\002\000\014\013\ufffa\015\ufffa\021" +
    "\011\022\ufffa\023\ufffa\001\002\000\004\004\230\001\002" +
    "\000\004\002\ufffe\001\002\000\012\013\ufff3\015\ufff3\022" +
    "\015\023\ufff3\001\002\000\010\013\uffee\015\uffee\023\040" +
    "\001\002\000\004\004\016\001\002\000\004\045\022\001" +
    "\002\000\012\004\ufff1\013\ufff1\015\ufff1\023\ufff1\001\002" +
    "\000\012\004\016\013\ufff4\015\ufff4\023\ufff4\001\002\000" +
    "\012\004\ufff2\013\ufff2\015\ufff2\023\ufff2\001\002\000\004" +
    "\010\023\001\002\000\004\037\024\001\002\000\006\004" +
    "\025\052\027\001\002\000\006\040\uffac\041\uffac\001\002" +
    "\000\004\041\030\001\002\000\006\040\uffad\041\uffad\001" +
    "\002\000\006\004\025\052\027\001\002\000\004\040\032" +
    "\001\002\000\004\011\033\001\002\000\006\005\034\006" +
    "\036\001\002\000\006\036\uffaf\043\uffaf\001\002\000\004" +
    "\043\037\001\002\000\006\036\uffae\043\uffae\001\002\000" +
    "\012\004\ufff0\013\ufff0\015\ufff0\023\ufff0\001\002\000\004" +
    "\004\206\001\002\000\006\013\uffe5\015\042\001\002\000" +
    "\004\004\174\001\002\000\014\013\ufffa\015\ufffa\021\011" +
    "\022\ufffa\023\ufffa\001\002\000\004\013\045\001\002\000" +
    "\022\004\066\014\uffcd\016\053\024\057\030\070\032\046" +
    "\033\064\034\051\001\002\000\004\035\167\001\002\000" +
    "\010\014\uffc6\025\uffc6\043\uffc6\001\002\000\004\014\164" +
    "\001\002\000\010\014\uffb4\025\uffb4\043\uffb4\001\002\000" +
    "\010\014\uffc3\025\uffc3\043\uffc3\001\002\000\016\004\104" +
    "\020\102\035\077\052\073\053\074\054\076\001\002\000" +
    "\010\014\uffc4\025\uffc4\043\uffc4\001\002\000\004\051\161" +
    "\001\002\000\010\014\uffce\025\uffce\043\157\001\002\000" +
    "\016\004\104\020\102\035\077\052\073\053\074\054\076" +
    "\001\002\000\010\014\uffca\025\uffca\043\uffca\001\002\000" +
    "\010\014\uffcb\025\uffcb\043\uffcb\001\002\000\010\014\uffc9" +
    "\025\uffc9\043\uffc9\001\002\000\010\014\uffc8\025\uffc8\043" +
    "\uffc8\001\002\000\004\035\145\001\002\000\010\014\uffc5" +
    "\025\uffc5\043\uffc5\001\002\000\016\014\uffbc\025\uffbc\035" +
    "\107\037\106\043\uffbc\051\uffb3\001\002\000\010\014\uffc7" +
    "\025\uffc7\043\uffc7\001\002\000\004\004\071\001\002\000" +
    "\004\051\072\001\002\000\016\004\104\020\102\035\077" +
    "\052\073\053\074\054\076\001\002\000\036\014\uffd5\017" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\036\uffd5\040\uffd5" +
    "\042\uffd5\043\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\001" +
    "\002\000\036\014\uffab\017\uffab\025\uffab\026\uffab\027\uffab" +
    "\031\uffab\036\uffab\040\uffab\042\uffab\043\uffab\045\uffab\046" +
    "\uffab\047\uffab\050\uffab\001\002\000\016\017\124\031\137" +
    "\045\120\046\121\047\123\050\122\001\002\000\036\014" +
    "\uffaa\017\uffaa\025\uffaa\026\uffaa\027\uffaa\031\uffaa\036\uffaa" +
    "\040\uffaa\042\uffaa\043\uffaa\045\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\001\002\000\016\004\104\020\102\035\077\052\073" +
    "\053\074\054\076\001\002\000\036\014\uffd0\017\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\031\uffd0\036\uffd0\040\uffd0\042\uffd0" +
    "\043\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002\000" +
    "\036\014\uffdb\017\uffdb\025\uffdb\026\uffdb\027\uffdb\031\uffdb" +
    "\036\uffdb\040\uffdb\042\uffdb\043\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\001\002\000\016\004\104\020\102\035\077" +
    "\052\073\053\074\054\076\001\002\000\036\014\uffd8\017" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\031\uffd8\036\uffd8\040\uffd8" +
    "\042\uffd8\043\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\001" +
    "\002\000\042\014\uffb3\017\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\031\uffb3\035\107\036\uffb3\037\106\040\uffb3\042\uffb3\043" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\001\002\000\036" +
    "\014\uffda\017\uffda\025\uffda\026\uffda\027\uffda\031\uffda\036" +
    "\uffda\040\uffda\042\uffda\043\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\001\002\000\016\004\104\020\102\035\077\052" +
    "\073\053\074\054\076\001\002\000\020\004\104\020\102" +
    "\035\077\036\114\052\073\053\074\054\076\001\002\000" +
    "\040\014\uffb2\017\uffb2\025\uffb2\026\uffb2\027\uffb2\031\uffb2" +
    "\036\uffb2\040\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\001\002\000\036\014\uffb1\017\uffb1" +
    "\025\uffb1\026\uffb1\027\uffb1\031\uffb1\036\uffb1\040\uffb1\042" +
    "\uffb1\043\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\001\002" +
    "\000\020\017\124\036\uffb7\042\uffb7\045\120\046\121\047" +
    "\123\050\122\001\002\000\006\036\116\042\115\001\002" +
    "\000\040\014\uffb9\017\uffb9\025\uffb9\026\uffb9\027\uffb9\031" +
    "\uffb9\036\uffb9\040\uffb9\042\uffb9\043\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\001\002\000\016\004\104\020" +
    "\102\035\077\052\073\053\074\054\076\001\002\000\040" +
    "\014\uffba\017\uffba\025\uffba\026\uffba\027\uffba\031\uffba\036" +
    "\uffba\040\uffba\042\uffba\043\uffba\045\uffba\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\001\002\000\020\017\124\036\uffb8\042" +
    "\uffb8\045\120\046\121\047\123\050\122\001\002\000\016" +
    "\004\104\020\102\035\077\052\073\053\074\054\076\001" +
    "\002\000\016\004\104\020\102\035\077\052\073\053\074" +
    "\054\076\001\002\000\016\004\104\020\102\035\077\052" +
    "\073\053\074\054\076\001\002\000\016\004\104\020\102" +
    "\035\077\052\073\053\074\054\076\001\002\000\016\004" +
    "\104\020\102\035\077\052\073\053\074\054\076\001\002" +
    "\000\036\014\uffd2\017\uffd2\025\uffd2\026\uffd2\027\uffd2\031" +
    "\uffd2\036\uffd2\040\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2" +
    "\047\123\050\uffd2\001\002\000\036\014\uffd6\017\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\031\uffd6\036\uffd6\040\uffd6\042\uffd6" +
    "\043\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\001\002\000" +
    "\032\014\uffd4\017\124\025\uffd4\026\uffd4\027\uffd4\031\uffd4" +
    "\036\uffd4\040\uffd4\042\uffd4\043\uffd4\046\121\047\123\001" +
    "\002\000\036\014\uffd7\017\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\031\uffd7\036\uffd7\040\uffd7\042\uffd7\043\uffd7\045\uffd7\046" +
    "\uffd7\047\123\050\uffd7\001\002\000\032\014\uffd3\017\124" +
    "\025\uffd3\026\uffd3\027\uffd3\031\uffd3\036\uffd3\040\uffd3\042" +
    "\uffd3\043\uffd3\046\121\047\123\001\002\000\016\017\124" +
    "\040\133\045\120\046\121\047\123\050\122\001\002\000" +
    "\040\014\uffb0\017\uffb0\025\uffb0\026\uffb0\027\uffb0\031\uffb0" +
    "\036\uffb0\040\uffb0\042\uffb0\043\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\001\002\000\036\014\uffd1\017\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\031\uffd1\036\uffd1\040\uffd1\042" +
    "\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\001\002" +
    "\000\016\017\124\036\136\045\120\046\121\047\123\050" +
    "\122\001\002\000\036\014\uffd9\017\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\031\uffd9\036\uffd9\040\uffd9\042\uffd9\043\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\001\002\000\016\004\104" +
    "\020\102\035\077\052\073\053\074\054\076\001\002\000" +
    "\016\017\124\027\141\045\120\046\121\047\123\050\122" +
    "\001\002\000\022\004\066\014\uffcd\016\053\024\057\030" +
    "\070\032\046\033\064\034\051\001\002\000\004\014\143" +
    "\001\002\000\010\014\uffbd\025\uffbd\043\uffbd\001\002\000" +
    "\012\014\uffbb\025\uffbb\043\uffbb\051\uffb1\001\002\000\016" +
    "\004\104\020\102\035\077\052\073\053\074\054\076\001" +
    "\002\000\016\017\124\036\147\045\120\046\121\047\123" +
    "\050\122\001\002\000\010\014\uffb5\025\uffb5\043\uffb5\001" +
    "\002\000\016\017\124\026\151\045\120\046\121\047\123" +
    "\050\122\001\002\000\024\004\066\014\uffcd\016\053\024" +
    "\057\025\uffcd\030\070\032\046\033\064\034\051\001\002" +
    "\000\006\014\uffbe\025\154\001\002\000\004\014\156\001" +
    "\002\000\022\004\066\014\uffcd\016\053\024\057\030\070" +
    "\032\046\033\064\034\051\001\002\000\004\014\uffbf\001" +
    "\002\000\010\014\uffc0\025\uffc0\043\uffc0\001\002\000\024" +
    "\004\066\014\uffcf\016\053\024\057\025\uffcf\030\070\032" +
    "\046\033\064\034\051\001\002\000\010\014\uffcc\025\uffcc" +
    "\043\uffcc\001\002\000\016\004\104\020\102\035\077\052" +
    "\073\053\074\054\076\001\002\000\022\014\uffc1\017\124" +
    "\025\uffc1\043\uffc1\045\120\046\121\047\123\050\122\001" +
    "\002\000\022\014\uffc2\017\124\025\uffc2\043\uffc2\045\120" +
    "\046\121\047\123\050\122\001\002\000\004\004\165\001" +
    "\002\000\004\043\166\001\002\000\010\002\ufffc\013\ufffc" +
    "\015\ufffc\001\002\000\004\007\170\001\002\000\004\036" +
    "\171\001\002\000\010\014\uffb6\025\uffb6\043\uffb6\001\002" +
    "\000\006\013\uffe5\015\042\001\002\000\004\013\uffe6\001" +
    "\002\000\010\035\175\043\uffe2\044\uffe2\001\002\000\006" +
    "\004\206\036\uffdf\001\002\000\006\043\uffdc\044\177\001" +
    "\002\000\006\005\034\006\036\001\002\000\004\043\201" +
    "\001\002\000\014\013\uffe4\015\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\001\002\000\004\043\uffdd\001\002\000\004\044\214" +
    "\001\002\000\006\036\uffe0\043\212\001\002\000\004\036" +
    "\211\001\002\000\006\042\207\044\uffe9\001\002\000\004" +
    "\004\206\001\002\000\004\044\uffea\001\002\000\006\043" +
    "\uffe3\044\uffe3\001\002\000\006\004\206\036\uffdf\001\002" +
    "\000\004\036\uffe1\001\002\000\010\004\217\005\034\006" +
    "\036\001\002\000\006\036\uffde\043\uffde\001\002\000\006" +
    "\036\uffe8\043\uffe8\001\002\000\006\036\uffe7\043\uffe7\001" +
    "\002\000\004\044\224\001\002\000\010\004\206\013\uffef" +
    "\015\uffef\001\002\000\010\004\uffec\013\uffec\015\uffec\001" +
    "\002\000\010\004\uffed\013\uffed\015\uffed\001\002\000\010" +
    "\004\217\005\034\006\036\001\002\000\004\043\226\001" +
    "\002\000\010\004\uffeb\013\uffeb\015\uffeb\001\002\000\014" +
    "\004\ufff8\013\ufff8\015\ufff8\022\ufff8\023\ufff8\001\002\000" +
    "\004\045\233\001\002\000\014\004\230\013\ufffb\015\ufffb" +
    "\022\ufffb\023\ufffb\001\002\000\014\004\ufff9\013\ufff9\015" +
    "\ufff9\022\ufff9\023\ufff9\001\002\000\010\052\234\053\074" +
    "\054\076\001\002\000\004\043\ufff6\001\002\000\004\043" +
    "\ufff5\001\002\000\004\043\237\001\002\000\014\004\ufff7" +
    "\013\ufff7\015\ufff7\022\ufff7\023\ufff7\001\002\000\004\043" +
    "\241\001\002\000\014\013\ufffd\015\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\002\003\056\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\011\006\012\001\001\000" +
    "\006\012\230\013\226\001\001\000\002\001\001\000\004" +
    "\007\013\001\001\000\004\010\040\001\001\000\006\015" +
    "\017\016\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\220\020\221" +
    "\021\217\001\001\000\006\011\043\023\042\001\001\000" +
    "\002\001\001\000\006\005\171\006\012\001\001\000\002" +
    "\001\001\000\032\030\047\031\055\032\060\036\054\037" +
    "\051\042\057\043\066\044\061\046\062\047\046\050\064" +
    "\051\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\033\162\034\100\035\104\036\102\055\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\033\147\034\100\035\104\036\102\055\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\143\052\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\033\074\034\100\035\104\036" +
    "\102\055\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\033\134\034" +
    "\100\035\104\036\102\055\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\033\133\034\100\035\104\036" +
    "\102\055\077\001\001\000\002\001\001\000\006\040\110" +
    "\052\107\001\001\000\002\001\001\000\014\033\131\034" +
    "\100\035\104\036\102\055\077\001\001\000\016\033\111" +
    "\034\100\035\104\036\102\041\112\055\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\033\116\034\100\035" +
    "\104\036\102\055\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\130\034\100\035\104\036\102\055" +
    "\077\001\001\000\014\033\127\034\100\035\104\036\102" +
    "\055\077\001\001\000\014\033\126\034\100\035\104\036" +
    "\102\055\077\001\001\000\014\033\125\034\100\035\104" +
    "\036\102\055\077\001\001\000\014\033\124\034\100\035" +
    "\104\036\102\055\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\033\137\034" +
    "\100\035\104\036\102\055\077\001\001\000\002\001\001" +
    "\000\032\030\141\031\055\032\060\036\054\037\051\042" +
    "\057\043\066\044\061\046\062\047\046\050\064\051\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\033\145\034\100\035\104\036\102\055\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\030\151\031\055\032\060\036\054\037\051" +
    "\042\057\043\066\044\061\046\062\047\046\050\064\051" +
    "\053\001\001\000\004\045\152\001\001\000\002\001\001" +
    "\000\032\030\154\031\055\032\060\036\054\037\051\042" +
    "\057\043\066\044\061\046\062\047\046\050\064\051\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\032" +
    "\157\036\054\037\051\042\057\043\066\044\061\046\062" +
    "\047\046\050\064\051\053\001\001\000\002\001\001\000" +
    "\014\033\161\034\100\035\104\036\102\055\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\172\023\042\001" +
    "\001\000\002\001\001\000\004\025\175\001\001\000\010" +
    "\021\202\026\204\027\203\001\001\000\004\024\177\001" +
    "\001\000\004\053\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\202\026\212\027\203\001\001\000\002\001\001\000\006" +
    "\022\214\053\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\222" +
    "\021\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\224\053\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\231\001\001\000\002\001\001\000\006\014\235\055\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory();

	public ScopeIF openScope(String scopeName) {
	    ScopeIF scope = scopeManager.openScope(scopeName);
      semanticErrorManager.semanticInfo("Opened " + scope);
      return scope;
	}

    public ScopeIF getCurrentScope() {
      return scopeManager.getCurrentScope();
    }

	public void closeCurrentScope() {
	      ScopeIF scope = scopeManager.getCurrentScope();
        if(scope!=null){
          scopeManager.closeScope();
        }
        semanticErrorManager.semanticInfo("Close " + scope);
	}

	public void checkSymbolDoesNotExists(String identifier){
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF symbolTable = scope.getSymbolTable();
	    if(symbolTable.containsSymbol(identifier)){
            semanticErrorManager.semanticFatalError("Identificador "+ identifier +" ya utilizado");
		}
	}

	public void checkSymbolExists(String identifier){
	      ScopeIF scope = scopeManager.getCurrentScope();
    		SymbolTableIF symbolTable = scope.getSymbolTable();
    	    if(!symbolTable.containsSymbol(identifier)){
                semanticErrorManager.semanticFatalError("Identificador " + identifier + " no existente");
    		}
	}

	public void checkSymbolType(String identifier, Class symbolToCompare){
    	        ScopeIF scope = scopeManager.getCurrentScope();
        		  SymbolTableIF symbolsTable = scope.getSymbolTable();
        	    SymbolIF symbol = symbolsTable.getSymbol(identifier);
        	    if(!symbol.getClass().equals(symbolToCompare)){
        	       semanticErrorManager.semanticFatalError("Tipo de simbolo no esperado");
        	    }
  }

  public ScopeIF searchScope(String scopeIdentifier) {
    List<ScopeIF> scopes = scopeManager.getAllScopes();
    for(ScopeIF scope : scopes){
      if(scope.getName().toLowerCase().equals(scopeIdentifier)) {
        return scope;
      }
    }
    return null;
  }

	public void checkTypeDoesNotExists(String identifier){
	    ScopeIF scope = scopeManager.getCurrentScope();
        TypeTableIF typeTable = scope.getTypeTable();
        if(typeTable.containsType(identifier)){
            semanticErrorManager.semanticFatalError("Tipo ya utilizado");
        }

        while(scope.getParentScope() != null){
           ScopeIF parentScope = scope.getParentScope();
           TypeTableIF parentTypeTable = parentScope.getTypeTable();
           if(typeTable.containsType(identifier)){
             semanticErrorManager.semanticFatalError("Tipo ya utilizado");
           }
        }
	}

    public TypeIF getType(String identifier) {
        	      List<ScopeIF> scopes = scopeManager.getAllScopes();
                for(ScopeIF scope : scopes){
                  TypeTableIF typeTable = scope.getTypeTable();
                  TypeIF type = typeTable.getType(identifier);
                  if (type==null) {
                      while(scope.getParentScope() != null){
                            scope = scope.getParentScope();
                            typeTable = scope.getTypeTable();
                            type = typeTable.getType(identifier);
                            if(type == null){
                              semanticErrorManager.semanticFatalError("Tipo no encontrado");
                            }
                      }
                  }
                  return type;
                }
                return null;
    }

    public void checkTypesAreSame(TypeIF typeLeft, TypeIF typeRigth){
        if(typeLeft.getName() != typeRigth.getName()) {
            semanticErrorManager.semanticFatalError("Los tipos no corresponden al esperado");
        }
    }

	public void addSymbol(String identifier, SymbolIF symbol){
	    ScopeIF scope = scopeManager.getCurrentScope();
        SymbolTableIF symbolTable = scope.getSymbolTable();
        symbolTable.addSymbol(identifier, symbol);
	}

	public void addType(String identifier, TypeIF type){
	    ScopeIF scope = scopeManager.getCurrentScope();
        TypeTableIF typeTable = scope.getTypeTable();
        typeTable.addType(identifier, type);
	}

	public SymbolIF getSymbol(String identificador){
	   ScopeIF scope = scopeManager.getCurrentScope();
       SymbolTableIF symbolTable = scope.getSymbolTable();
       return symbolTable.getSymbol(identificador);
	}

	public TypeIF getExpresionTypeResult(Expresion expresion) {

		TypeTableIF typeTable = getCurrentScope().getTypeTable();

		if (expresion.getExpArit() != null) {
			return typeTable.getType("int");
		}

		if (expresion.getExprLogica() != null) {
			return typeTable.getType("boolean");
		}

		if (expresion.getVariables() != null) {

			if (expresion.getVariables().getParFuncion()!= null && expresion.getVariables().getParFuncion().getParametros() !=null && expresion.getVariables().getParFuncion().getParametros().getExpresionList().size() > 0) {
				return getExpresionTypeResult(expresion.getVariables().getParFuncion().getParametros().getExpresionList().get(0));
			}

			if (expresion.getVariables().getIdArray() != null) {
				return getExpresionTypeResult(expresion.getVariables().getIdArray().getExpresion());
			}

			if (expresion.getVariables().getIdentificador() != null) {
				SymbolTableIF symbolTableIF = getCurrentScope().getSymbolTable();
				return symbolTableIF.getSymbol(expresion.getVariables().getIdentificador()).getType();
			}
		}

		return getExpresionTypeResult(expresion.getExpresionList().get(0));
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // vBooleano ::= FALSE 
            {
              VBooleano RESULT =null;
		
                   RESULT = new VBooleano(false);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vBooleano",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // vBooleano ::= TRUE 
            {
              VBooleano RESULT =null;
		
                   RESULT = new VBooleano(true);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vBooleano",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // entOid ::= IDENTIFICADOR 
            {
              EntOId RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new EntOId(identificador.getLexema());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entOid",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // entOid ::= ENTERO 
            {
              EntOId RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new EntOId(Integer.parseInt(entero.getLexema()));
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entOid",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // intOBool ::= BOOLEAN 
            {
              IntOBool RESULT =null;
		
                    RESULT =  new IntOBool("BOOL");
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intOBool",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // intOBool ::= INTEGER 
            {
              IntOBool RESULT =null;
		
                    RESULT =  new IntOBool("INTEGER");
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intOBool",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // idArray ::= CORCHIZQ expresion CORCHDER 
            {
              IdArray RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new IdArray(expresion);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idArray",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variables ::= IDENTIFICADOR parFuncion 
            {
              Variables RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parFuncionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parFuncionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParFuncion parFuncion = (ParFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     //Comprobamos que el procedimiento ya existe en el scope
                      checkSymbolExists(identificador.getLexema());

                      Variables variables = new Variables(identificador.getLexema(), parFuncion);

                      //Comprobamos que los parametros son correctos
                      //Obtenemos el simbolo en la tabla de simbolos
                      SymbolProcedure symbol = (SymbolProcedure) getSymbol(identificador.getLexema());

                      int definedParams = 0;
                      for(ProcParam procParam : symbol.getCabProcedure().getProcParemParam().getProcListParam().getProcListParam()){
                        definedParams+=procParam.getCadIdVar().getIdentificadores().size();
                      }

                      if(parFuncion.getParametros()!=null && parFuncion.getParametros().getExpresionList().size()!=definedParams){
                        semanticErrorManager.semanticFatalError("Numero de parametros de llamada a funcion incorrecto");
                      }


                      if(symbol.getCabProcedure().getProcParemParam().getProcListParam().getProcListParam()!=null){
                          for(int i=0;i<symbol.getCabProcedure().getProcParemParam().getProcListParam().getProcListParam().size();i++) {
                            //Comprobamos en base a la definicion
                            ProcParam procParam = symbol.getCabProcedure().getProcParemParam().getProcListParam().getProcListParam().get(i);
                            CadIdVar cadIdVar = procParam.getCadIdVar();
                            TipoVar tipoVar   = procParam.getTipoVar();
                            if(cadIdVar!=null && cadIdVar.getIdentificadores()!=null){
                              for(int j=0;j<cadIdVar.getIdentificadores().size();j++){
                                  checkTypesAreSame(getType(tipoVar.getIdentificadorTipo()), getExpresionTypeResult(parFuncion.getParametros().getExpresionList().get(j)));
                              }
                            }
                        }
                      }

                       // Generación de código intermedio
                      ScopeIF scope = scopeManager.getCurrentScope();
                      IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                      TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                      LabelFactoryIF lf = new LabelFactory();
                      TemporalIF temp = tf.create();
                      LabelIF l1 = lf.create(identificador.getLexema());

                      Procedure procedure = new Procedure(identificador.getLexema(), getCurrentScope(), symbol);
  
                      //Codigo de los parametros
		                  cb.addQuadruples(parFuncion.getIntermediateCode());
                      cb.addQuadruple("CALL", procedure, temp);

                      if(getSymbol(identificador.getLexema()) instanceof SymbolFunction) {
                        cb.addQuadruple("RETVALUE",temp);
                      }

                      variables.setIntermediateCode(cb.create());
                      variables.setTemporal(temp);

                    RESULT = variables;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variables ::= IDENTIFICADOR idArray 
            {
              Variables RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idArrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idArrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdArray idArray = (IdArray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Variables variables = new Variables(identificador.getLexema(), idArray);
                    if(idArray.getExpresion().getExpArit()!=null) {
                          if(idArray.getExpresion().getExpArit().getValue()!=null){
                            SymbolVariable symbolVariable = (SymbolVariable) getSymbol(identificador.getLexema());
                            TypeIF type = symbolVariable.getType();
                            if (type instanceof TypeArray) {
                                TypeArray typeArray = (TypeArray) type;
                              if (idArray.getExpresion().getExpArit().getValue() > typeArray.getExpTipo().getRigth().getValue()){
                                  semanticErrorManager.semanticFatalError("Posicion de array fuera de rango");
                              }
                          }
                      }
                    }

                    if (idArray.getExpresion().getVariables()!= null && idArray.getExpresion().getVariables()!=null){
                        String identificadorVariableIdArray = idArray.getExpresion().getVariables().getIdentificador();
                        SymbolVariable symbolVariableIdArray = (SymbolVariable) getSymbol(identificadorVariableIdArray);
                        
                        if (!symbolVariableIdArray.getType().getName().equals("int") && !symbolVariableIdArray.getType().getName().equals("TVector")) {
                          semanticErrorManager.semanticFatalError("Acceso a posicion de array con variable no entera");
                        }
                    }

                    //Código intermedio
                    ScopeIF scope = scopeManager.getCurrentScope();
                    TemporalFactory tF = new TemporalFactory(getCurrentScope());
                    IntermediateCodeBuilder cb = new IntermediateCodeBuilder(getCurrentScope());
                    SymbolIF symbol = scopeManager.searchSymbol(identificador.getLexema());

                    TemporalIF temp = tF.create();
                    TemporalIF temp1 = tF.create();
                    TemporalIF temp2 = tF.create();
                    TemporalIF temp3 = tF.create();

                    if (symbol instanceof SymbolVariable) {
                      Variable variable = new Variable(identificador.getLexema(), symbol.getScope());
                      SymbolProcedure enclosingSymbol = (SymbolProcedure) scopeManager.searchSymbol(scope.getName());
                      variable.setEnclosingSymbol(enclosingSymbol);
                      cb.addQuadruple("MVA", temp, variable);   
                      variables.setVariable(variable);
                    } else if (symbol instanceof SymbolParameter) { 
                      OperandIF  o = new Variable(identificador.getLexema(), symbol);     
                      SymbolProcedure enclosingSymbol = (SymbolProcedure) scopeManager.searchSymbol(scope.getName());
                      ((Variable) o).setEnclosingSymbol(enclosingSymbol);
                      ((Variable) o).setParameter(true);      
                      variables.setVariable((Variable)o);
                      cb.addQuadruple("MVA", temp, o);   
                    } else {
                        SymbolConstant constant = (SymbolConstant) symbol;
                        OperandIF o = new Value(constant.getValue());
                        cb.addQuadruple("MV", temp, o);
                    }
                    
                    TemporalIF tempPosicion = idArray.getExpresion().getTemporal();
                    cb.addQuadruple("MV", temp2, tempPosicion);
                    cb.addQuadruple("ADD", temp3, temp1, temp2);
                    cb.addQuadruple("MVP", temp, temp3);

                    variables.setTemporal(temp); 
                    variables.setIntermediateCode(cb.create());

                    RESULT = variables;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variables ::= IDENTIFICADOR 
            {
              Variables RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ScopeIF scope = scopeManager.getCurrentScope();
                    SymbolTableIF symbolTable = scope.getSymbolTable();
                    checkSymbolExists(identificador.getLexema());

                    Variables variables = new Variables(identificador.getLexema());

                    //Código intermedio
                    TemporalFactory tf = new TemporalFactory(getCurrentScope()); 
                    IntermediateCodeBuilder cb = new IntermediateCodeBuilder(getCurrentScope()); 
                    TemporalIF temp = tf.create();
                    SymbolIF symbol = scopeManager.searchSymbol(identificador.getLexema());

                    if (symbol instanceof SymbolVariable) {
                      Variable variable = new Variable(identificador.getLexema(), symbol.getScope());
                      SymbolProcedure enclosingSymbol = (SymbolProcedure) scopeManager.searchSymbol(scope.getName());
                      variable.setEnclosingSymbol(enclosingSymbol);
                      cb.addQuadruple("MVA", temp, variable);   
                      variables.setVariable(variable);
                    } else if (symbol instanceof SymbolParameter) { 
                      OperandIF  o = new Variable(identificador.getLexema(), symbol);     
                      SymbolProcedure enclosingSymbol = (SymbolProcedure) scopeManager.searchSymbol(scope.getName());
                      ((Variable) o).setEnclosingSymbol(enclosingSymbol);
                      ((Variable) o).setParameter(true);      
                      variables.setVariable((Variable)o);
                      cb.addQuadruple("MVA", temp, o);   
                    } else {
                        SymbolConstant constant = (SymbolConstant) symbol;
                        OperandIF o = new Value(constant.getValue());
                        cb.addQuadruple("MV", temp, o); 
                    }

                    variables.setTemporal(temp);
                    variables.setIntermediateCode(cb.create());

                    RESULT = variables;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sWriteLn ::= WRITELN 
            {
              SWriteLn RESULT =null;
		
                    SWriteLn sWriteLn = new SWriteLn();

                    //Generacion de Codigo Intermedio
                    TemporalFactory tF = new TemporalFactory(getCurrentScope());
                    IntermediateCodeBuilder cb = new IntermediateCodeBuilder(getCurrentScope());
                    LabelFactory lF = new LabelFactory();
                    LabelIF lb = lF.create();
                    TemporalIF temp = tF.create();
                    cb.addQuadruple("WRITELN", temp, lb);
                    sWriteLn.setIntermediateCode(cb.create());

                    RESULT = sWriteLn;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sWriteLn",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sWriteInt ::= WRITEINT PARENIZQ expresion PARENDER 
            {
              SWriteInt RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    SWriteInt sWriteInt = new SWriteInt(expresion);

                    IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                    TemporalIF eTemp = expresion.getTemporal();
                    cb.addQuadruples(expresion.getIntermediateCode());
                    cb.addQuadruple("WRITEINT", eTemp);
                    sWriteInt.setIntermediateCode(cb.create());

                    RESULT = sWriteInt;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sWriteInt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sWriteString ::= WRITESTRING PARENIZQ STRING PARENDER 
            {
              SWriteString RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token string = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                SWriteString sWriteString = new SWriteString(string.getLexema());

                //Generacion de Codigo Intermedio
                TemporalFactory tF = new TemporalFactory(getCurrentScope());
                IntermediateCodeBuilder cb = new IntermediateCodeBuilder(getCurrentScope());
                LabelFactory lF = new LabelFactory();
                LabelIF lb = lF.create();
                TemporalIF temp = tF.create();
                cb.addQuadruple("WRITESTRING", null, new Value(string.getLexema()));
                sWriteString.setIntermediateCode(cb.create());

                 RESULT = sWriteString;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sWriteString",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros ::= expresion 
            {
              Parametros RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                  Parametros parametros = new Parametros(expresion);

                  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                  TemporalIF temp = expresion.getTemporal();
                  cb.addQuadruples(expresion.getIntermediateCode());
                  cb.addQuadruple("PARAM", temp);
                  parametros.setIntermediateCode(cb.create());

                  RESULT = parametros;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros ::= parametros COMA expresion 
            {
              Parametros RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametros parametros = (Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parametros.addExpresion(expresion);

                    // Generación de código intermedio
                    IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                    TemporalIF temp = expresion.getTemporal();
                    cb.addQuadruples(expresion.getIntermediateCode());
                    cb.addQuadruples(parametros.getIntermediateCode());
                    cb.addQuadruple("PARAM", temp);
                    parametros.setIntermediateCode(cb.create());

                    RESULT = parametros;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parFuncion ::= PARENIZQ PARENDER 
            {
              ParFuncion RESULT =null;
		
                   RESULT = new ParFuncion();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parFuncion ::= PARENIZQ parametros PARENDER 
            {
              ParFuncion RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parametros parametros = (Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   ParFuncion parFuncion = new ParFuncion(parametros);

                    //Código intermedio  
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
		               cb.addQuadruple("STARTRA");
                   cb.addQuadruples(parametros.getIntermediateCode());
                   parFuncion.setIntermediateCode(cb.create());

                   RESULT = parFuncion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentProcedure ::= IDENTIFICADOR parFuncion 
            {
              SentProcedure RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parFuncionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parFuncionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParFuncion parFuncion = (ParFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      
                      //Comprobamos que el procedimiento ya existe en el scope
                      checkSymbolExists(identificador.getLexema());

                      SentProcedure sentProcedure = new SentProcedure(identificador.getLexema(), parFuncion);

                      //Comprobamos que los parametros son correctos
                      //Obtenemos el simbolo en la tabla de simbolos
                      SymbolProcedure symbol = (SymbolProcedure) getSymbol(identificador.getLexema());

                      int definedParams = 0;
                      for(ProcParam procParam : symbol.getCabProcedure().getProcParemParam().getProcListParam().getProcListParam()){
                        definedParams+=procParam.getCadIdVar().getIdentificadores().size();
                      }

                      if(parFuncion.getParametros()!=null && parFuncion.getParametros().getExpresionList().size()!=definedParams){
                        semanticErrorManager.semanticFatalError("Numero de parametros de llamada a funcion incorrecto");
                      }

                      if(symbol.getCabProcedure().getProcParemParam().getProcListParam().getProcListParam()!=null) {
                          for(int i=0;i<symbol.getCabProcedure().getProcParemParam().getProcListParam().getProcListParam().size();i++) {
                            //Comprobamos en base a la definicion
                            ProcParam procParam = symbol.getCabProcedure().getProcParemParam().getProcListParam().getProcListParam().get(i);
                            CadIdVar cadIdVar = procParam.getCadIdVar();
                            TipoVar tipoVar   = procParam.getTipoVar();

                            for(int j=0;j<cadIdVar.getIdentificadores().size();j++){
                                checkTypesAreSame(getType(tipoVar.getIdentificadorTipo()), getExpresionTypeResult(parFuncion.getParametros().getExpresionList().get(j)));
                            }
                        }
                      }

                      // Generación de código intermedio
                      ScopeIF scope = scopeManager.getCurrentScope();
                      IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                      TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                      LabelFactoryIF lf = new LabelFactory();
                      TemporalIF temp = tf.create();
                      LabelIF l1 = lf.create(identificador.getLexema());
                      sentProcedure.setTemporal(temp);

                      Procedure procedure = new Procedure(identificador.getLexema(), getCurrentScope(), symbol);

                      //Codigo de los parametros
		                  cb.addQuadruples(parFuncion.getIntermediateCode());

                      cb.addQuadruple("CALL", procedure, temp);
                      cb.addQuadruple("RETURNVALUE",temp);

                      sentProcedure.setIntermediateCode(cb.create());
                      sentProcedure.setTemporal(temp);

                     RESULT = sentProcedure;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentProcedure",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentProcedure ::= IDENTIFICADOR 
            {
              SentProcedure RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                     //Comprobamos que el procedimiento ya existe en el scope
                      checkSymbolExists(identificador.getLexema());

                      SentProcedure sentProcedure = new SentProcedure(identificador.getLexema());
                      SymbolProcedure symbol = (SymbolProcedure) getSymbol(identificador.getLexema());

                      // Generación de código intermedio
                      ScopeIF scope = scopeManager.getCurrentScope();
                      IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                      TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                      LabelFactoryIF lf = new LabelFactory();
                      TemporalIF temp = tf.create();
                      LabelIF l1 = lf.create(identificador.getLexema());

                      Procedure procedure = new Procedure(identificador.getLexema(), getCurrentScope(), symbol);
		                  cb.addQuadruple("CALL", procedure, temp);
                      if (getSymbol(identificador.getLexema()) instanceof SymbolFunction) {
                        cb.addQuadruple("RETVALUE",temp);
                      }
                      sentProcedure.setIntermediateCode(cb.create());
                      sentProcedure.setTemporal(temp);

                      RESULT = sentProcedure;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentProcedure",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentFor ::= FOR IDENTIFICADOR DOSPUNTOSIGUAL expresion TO expresion DO sentencias END 
            {
              SentFor RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expresionFromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expresionFromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion expresionFrom = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expresionToleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expresionToright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion expresionTo = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias sentencias = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   SentFor sentFor = new SentFor(identificador.getLexema(), expresionFrom, expresionTo, sentencias);

                  // Generación de código intermedio
                  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                  LabelFactoryIF lf = new LabelFactory();
                  TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                  LabelIF l1 = lf.create();
                  LabelIF l2 = lf.create();

                  //Código intermedio
                  //Inicio la variable del bucle
              
                  Variable var = new Variable(identificador.getLexema(), getSymbol(identificador.getLexema()).getScope());

                  cb.addQuadruples(expresionFrom.getIntermediateCode());
                  cb.addQuadruple("MV", var, expresionFrom.getTemporal());
                  cb.addQuadruple("INL",l1);
                  cb.addQuadruples(expresionTo.getIntermediateCode());
                  cb.addQuadruple("INC", expresionTo.getTemporal());
                  cb.addQuadruple("BRF",l2, var, expresionTo.getTemporal());
                  cb.addQuadruples(sentencias.getIntermediateCode());
                  cb.addQuadruple("INC", var);
                  cb.addQuadruple("BR",l1);
                  cb.addQuadruple("INL",l2);
                  sentFor.setIntermediateCode(cb.create());
                  RESULT = sentFor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentFor",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentElse ::= 
            {
              SentElse RESULT =null;
		
                   RESULT = new SentElse();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentElse",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentElse ::= ELSE sentencias 
            {
              SentElse RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencias sentencias = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   SentElse sentElse = new SentElse(sentencias);

                    //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(sentencias.getIntermediateCode());
                   sentElse.setIntermediateCode(cb.create());

                   RESULT = sentElse;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentElse",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentIf ::= IF expresion THEN sentencias sentElse END 
            {
              SentIf RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sentencias sentencias = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentElse sentElse = (SentElse)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                  SentIf sentIf = new SentIf(expresion, sentencias, sentElse);

                  //Codigo intermedio
                  LabelFactory lF = new LabelFactory();
                  LabelIF l1 = lF.create();
                  LabelIF l2 = lF.create();
                  IntermediateCodeBuilder cb= new IntermediateCodeBuilder(getCurrentScope());
                  cb.addQuadruples(expresion.getIntermediateCode());
                  cb.addQuadruple("BRF", l1, expresion.getTemporal());
                  cb.addQuadruples(sentencias.getIntermediateCode());
                  if (sentElse.getSentencias()!=null){
                    cb.addQuadruple("BR", l2);
                  }
                  cb.addQuadruple("INL", l1);
                  if(sentElse.getSentencias()!=null){
                    cb.addQuadruples(sentElse.getIntermediateCode());
                    cb.addQuadruple("INL", l2);
                  }
                  
                  sentIf.setIntermediateCode(cb.create());

                  RESULT = sentIf;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentAsign ::= variables DOSPUNTOSIGUAL expresion 
            {
              SentAsign RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variables variables = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                  SentAsign sentAsign = new SentAsign(variables, expresion);
                  SymbolIF symbol = getSymbol(variables.getIdentificador());

                  if (symbol instanceof SymbolConstant) {
                     semanticErrorManager.semanticFatalError(variables.getIdentificador() +" es una constante, no se puede reasignar el valor");
                  }

                   IntermediateCodeBuilder cb = new IntermediateCodeBuilder(getCurrentScope()); 
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   TemporalIF tempExp = expresion.getTemporal();
                   TemporalIF temp = tf.create();
                  if (symbol instanceof TypeFunction) {
                      cb.addQuadruples(expresion.getIntermediateCode());
                      cb.addQuadruple("MV", temp, tempExp);
                      cb.addQuadruple("MV", variables.getVariable(), temp);
                  } else {
                      cb.addQuadruples(expresion.getIntermediateCode());
                      cb.addQuadruples(variables.getIntermediateCode());   	
                      cb.addQuadruple("MV", temp, tempExp);
                      cb.addQuadruple("MV", variables.getVariable(), temp);
                  }
                   sentAsign.setIntermediateCode(cb.create());
                  RESULT = sentAsign;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentAsign",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentReturn ::= RETURN expresion 
            {
              SentReturn RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                    SentReturn sentReturn = new SentReturn(expresion);

                    // Generación de código intermedio
                    IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                    TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                    LabelFactoryIF lf = new LabelFactory();
                    TemporalIF temp = tf.create();
                    LabelIF l1 = lf.create("F" + getCurrentScope().getName());
                    cb.addQuadruples(expresion.getIntermediateCode());
                    cb.addQuadruple("RETURN",l1, temp);
                    sentReturn.setIntermediateCode(cb.create());
                    RESULT = sentReturn;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= sentProcedure 
            {
              Sentencia RESULT =null;
		int sentProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentProcedure sentProcedure = (SentProcedure)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Sentencia sentencia = new Sentencia(sentProcedure);

                  //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(sentProcedure.getIntermediateCode());
                   sentencia.setIntermediateCode(cb.create());

                  RESULT = sentencia;              
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= sWriteLn 
            {
              Sentencia RESULT =null;
		int sWriteLnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sWriteLnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SWriteLn sWriteLn = (SWriteLn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Sentencia sentencia = new Sentencia(sWriteLn);

                  //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(sWriteLn.getIntermediateCode());
                   sentencia.setIntermediateCode(cb.create());

                  RESULT = sentencia;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= sWriteInt 
            {
              Sentencia RESULT =null;
		int sWriteIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sWriteIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SWriteInt sWriteInt = (SWriteInt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Sentencia sentencia = new Sentencia(sWriteInt);

                  //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(sWriteInt.getIntermediateCode());
                   sentencia.setIntermediateCode(cb.create());

                  RESULT = sentencia;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia ::= sWriteString 
            {
              Sentencia RESULT =null;
		int sWriteStringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sWriteStringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SWriteString sWriteString = (SWriteString)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Sentencia sentencia = new Sentencia(sWriteString);

                   //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(sWriteString.getIntermediateCode());
                   sentencia.setIntermediateCode(cb.create());

                  RESULT = sentencia;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= sentReturn 
            {
              Sentencia RESULT =null;
		int sentReturnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentReturnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentReturn sentReturn = (SentReturn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Sentencia sentencia = new Sentencia(sentReturn);

                  //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(sentReturn.getIntermediateCode());
                   sentencia.setIntermediateCode(cb.create());

                  RESULT = sentencia;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= sentFor 
            {
              Sentencia RESULT =null;
		int sentForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentForright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentFor sentFor = (SentFor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Sentencia sentencia = new Sentencia(sentFor);

                  //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(sentFor.getIntermediateCode());
                   sentencia.setIntermediateCode(cb.create());

                  RESULT = sentencia;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= sentIf 
            {
              Sentencia RESULT =null;
		int sentIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentIf sentIf = (SentIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Sentencia sentencia = new Sentencia(sentIf);

                   //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(sentIf.getIntermediateCode());
                   sentencia.setIntermediateCode(cb.create());

                  RESULT = sentencia;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia ::= sentAsign 
            {
              Sentencia RESULT =null;
		int sentAsignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentAsignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentAsign sentAsign = (SentAsign)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Sentencia sentencia = new Sentencia(sentAsign);

                    //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(sentAsign.getIntermediateCode());
                   sentencia.setIntermediateCode(cb.create());

                   RESULT = sentencia;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listSentencia ::= sentencia 
            {
              ListSentencia RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   ListSentencia listSentencia = new ListSentencia(sentencia);

                   //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(sentencia.getIntermediateCode());
                   listSentencia.setIntermediateCode(cb.create());

                   RESULT = listSentencia;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listSentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listSentencia ::= listSentencia PUNTOYCOMA sentencia 
            {
              ListSentencia RESULT =null;
		int listSentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listSentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListSentencia listSentencia = (ListSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                    IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                    listSentencia.addSentencia(sentencia);
                    cb.addQuadruples(listSentencia.getIntermediateCode());
                    listSentencia.setIntermediateCode(cb.create());

                    RESULT = listSentencia;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listSentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencias ::= 
            {
              Sentencias RESULT =null;
		
                  RESULT = new Sentencias();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencias ::= listSentencia 
            {
              Sentencias RESULT =null;
		int listSentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listSentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListSentencia listSentencia = (ListSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                   Sentencias sentencias = new Sentencias(listSentencia);
                   //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(listSentencia.getIntermediateCode());
                   sentencias.setIntermediateCode(cb.create());

                   RESULT = sentencias;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencias ::= listSentencia PUNTOYCOMA 
            {
              Sentencias RESULT =null;
		int listSentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listSentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListSentencia listSentencia = (ListSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                   Sentencias sentencias = new Sentencias(listSentencia);

                   //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(listSentencia.getIntermediateCode());
                   sentencias.setIntermediateCode(cb.create());

                   RESULT = sentencias;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprLogica ::= vBooleano 
            {
              ExprLogica RESULT =null;
		int vBooleanoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vBooleanoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VBooleano vBooleano = (VBooleano)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ExprLogica expLogica = new ExprLogica(vBooleano);
                  
                    //Código intermedio
                  	TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                    IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                    TemporalIF temp = tf.create();
                    cb.addQuadruple("MV", temp, Boolean.compare(vBooleano.getValue(), false));
                    expLogica.setTemporal(temp);
                    expLogica.setIntermediateCode(cb.create());

                   RESULT = expLogica;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprLogica ::= NOT expresion 
            {
              ExprLogica RESULT =null;
		int expresionlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresionl = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                  ExprLogica expLogica = new ExprLogica(expresionl, "NOT");

                  //Ćdigo intermedio
                  TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                  TemporalIF temp1 = expresionl.getTemporal();
                  TemporalIF temp = tf.create();
                  cb.addQuadruples(expresionl.getIntermediateCode());
                  cb.addQuadruple("NOT", temp, temp1);
                  expLogica.setTemporal(temp);
                  expLogica.setIntermediateCode(cb.create());

                  RESULT = expLogica;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprLogica ::= expresion OR expresion 
            {
              ExprLogica RESULT =null;
		int expresionlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresionl = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresionr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ExprLogica expLogica = new ExprLogica(expresionl, "OR", expresionr);
                 
                  ScopeIF scope = scopeManager.getCurrentScope();
                  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                  TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                  LabelFactoryIF lf = new LabelFactory();
                  TemporalIF e1Temp = expresionl.getTemporal();
                  TemporalIF e2Temp = expresionr.getTemporal();
                  TemporalIF temp = tf.create();
                  LabelIF l1 = lf.create();
                  LabelIF l2 = lf.create();
                  LabelIF l3 = lf.create();
                  cb.addQuadruples(expresionl.getIntermediateCode());
                  cb.addQuadruple("BRF",e1Temp,l1);
                  cb.addQuadruple("MV",temp, new Value(1));
                  cb.addQuadruple("BR",l3);
                  cb.addQuadruple("INL",l1);
                  cb.addQuadruples(expresionr.getIntermediateCode());
                  cb.addQuadruple("BRF",e2Temp,l2);
                  cb.addQuadruple("MV",temp,new Value(1));
                  cb.addQuadruple("BR",l3);
                  cb.addQuadruple("INL",l2);
                  cb.addQuadruple("MV",temp,new Value(0));
                  cb.addQuadruple("INL",l3);
                  expLogica.setTemporal(temp);
                  expLogica.setIntermediateCode(cb.create());

                  RESULT = expLogica;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprLogica ::= expresion IGUAL expresion 
            {
              ExprLogica RESULT =null;
		int expresionlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresionl = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresionr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ExprLogica expLogica = new ExprLogica(expresionl, "=", expresionr);

                   //Código intermedio
                  TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                  TemporalIF temp1 = expresionl.getTemporal();
                  TemporalIF temp2 = expresionr.getTemporal();
                  TemporalIF temp = tf.create();
                  cb.addQuadruples(expresionl.getIntermediateCode());
                  cb.addQuadruples(expresionr.getIntermediateCode());
                  cb.addQuadruple("EQ",temp,temp1,temp2);
                  expLogica.setTemporal(temp);
                  expLogica.setIntermediateCode(cb.create());
                  
                  RESULT = expLogica;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprLogica ::= expresion MAYOR expresion 
            {
              ExprLogica RESULT =null;
		int expresionlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresionl = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresionr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ExprLogica expLogica = new ExprLogica(expresionl, ">", expresionr);
                  
                    //Código intermedio
                  	TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                    IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                    TemporalIF temp1 = expresionl.getTemporal();
                    TemporalIF temp2 = expresionr.getTemporal();
                    TemporalIF temp = tf.create();
                    cb.addQuadruples(expresionl.getIntermediateCode());
                    cb.addQuadruples(expresionr.getIntermediateCode());
                    cb.addQuadruple("GR",temp,temp1,temp2);
                    expLogica.setTemporal(temp);
                    expLogica.setIntermediateCode(cb.create());
                                
                    RESULT = expLogica;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exprArit ::= ENTERO 
            {
              ExpArit RESULT =null;
		int ENTEROleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ENTEROright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token ENTERO = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ExpArit expArit = new ExpArit(Integer.parseInt(ENTERO.getLexema()));

                  //Código intermedio
                  TemporalFactory tf = new TemporalFactory(getCurrentScope());
                  IntermediateCodeBuilder cb = new IntermediateCodeBuilder(getCurrentScope());
                  TemporalIF temp = tf.create();
                  cb.addQuadruple("MV", temp, Integer.parseInt(ENTERO.getLexema()));
                  expArit.setTemporal(temp);
                  expArit.setIntermediateCode(cb.create());

                  RESULT = expArit;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exprArit ::= expresion PRODUCTO expresion 
            {
              ExpArit RESULT =null;
		int expresionlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresionl = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresionr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ExpArit expArit = new ExpArit(expresionl, "*", expresionr);

                   //Código intermedio
                  TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                  TemporalIF temp1 = expresionl.getTemporal();
                  TemporalIF temp2 = expresionr.getTemporal();
                  TemporalIF temp = tf.create();
                  cb.addQuadruples(expresionl.getIntermediateCode());
                  cb.addQuadruples(expresionr.getIntermediateCode());
                  cb.addQuadruple("MULT", temp, temp1, temp2);
                  expArit.setTemporal(temp);
                  expArit.setIntermediateCode(cb.create());
                  RESULT = expArit;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exprArit ::= expresion MINUS expresion 
            {
              ExpArit RESULT =null;
		int expresionlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresionl = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresionr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ExpArit expArit = new ExpArit(expresionl, "-", expresionr);
                  //Código intermedio
                  TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                  TemporalIF temp1 = expresionl.getTemporal();
                  TemporalIF temp2 = expresionr.getTemporal();
                  TemporalIF temp = tf.create();
                  cb.addQuadruples(expresionl.getIntermediateCode());
                  cb.addQuadruples(expresionr.getIntermediateCode());
                  cb.addQuadruple("SUB",temp,temp1,temp2);
                  expArit.setTemporal(temp);
                  expArit.setIntermediateCode(cb.create());
                  RESULT = expArit;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= variables 
            {
              Expresion RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables variables = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                  Expresion expresion = new Expresion(variables);

                  //Código intermedio
                  TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                  cb.addQuadruples(variables.getIntermediateCode());
                  expresion.setIntermediateCode(cb.create());
                  expresion.setTemporal(variables.getTemporal());

                 RESULT = expresion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= PARENIZQ expresion PARENDER 
            {
              Expresion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 expresion.addExpresion(expresion);
                 RESULT = expresion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= exprLogica 
            {
              Expresion RESULT =null;
		int exprLogicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprLogicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprLogica exprLogica = (ExprLogica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Expresion expresion = new Expresion(exprLogica);
                
                  //Código intermedio
                  TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                  cb.addQuadruples(exprLogica.getIntermediateCode());
                  expresion.setIntermediateCode(cb.create());
                  expresion.setTemporal(exprLogica.getTemporal());

                  RESULT = expresion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= exprArit 
            {
              Expresion RESULT =null;
		int exprAritleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprAritright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpArit exprArit = (ExpArit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Expresion expresion = new Expresion(exprArit);
                
                  //Código intermedio
                  TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                  cb.addQuadruples(exprArit.getIntermediateCode());
                  expresion.setIntermediateCode(cb.create());
                  expresion.setTemporal(exprArit.getTemporal());

                  RESULT = expresion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipoRetorno ::= 
            {
              TipoRetorno RESULT =null;
		
                   RESULT = new TipoRetorno();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoRetorno ::= DOSPUNTOS intOBool 
            {
              TipoRetorno RESULT =null;
		int intOBoolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intOBoolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntOBool intOBool = (IntOBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new TipoRetorno(intOBool);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procParam ::= cadIdVar DOSPUNTOS tipoVar 
            {
              ProcParam RESULT =null;
		int cadIdVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadIdVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CadIdVar cadIdVar = (CadIdVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TipoVar tipoVar = (TipoVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = new ProcParam(cadIdVar, tipoVar);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procParam",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procListParam ::= 
            {
              ProcListParam RESULT =null;
		
                    RESULT = new ProcListParam();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procListParam",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procListParam ::= procParam 
            {
              ProcListParam RESULT =null;
		int procParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcParam procParam = (ProcParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new ProcListParam(procParam);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procListParam",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procListParam ::= procParam PUNTOYCOMA procListParam 
            {
              ProcListParam RESULT =null;
		int procParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int procParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcParam procParam = (ProcParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procListParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procListParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcListParam procListParam = (ProcListParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 procListParam.addProcParam(procParam);
                 RESULT = procListParam;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procListParam",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procParenParam ::= 
            {
              ProcParenParam RESULT =null;
		
                 RESULT = new ProcParenParam();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procParenParam",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // procParenParam ::= PARENIZQ procListParam PARENDER 
            {
              ProcParenParam RESULT =null;
		int procListParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procListParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcListParam procListParam = (ProcListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 RESULT = new ProcParenParam(procListParam);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procParenParam",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cabProcedure ::= PROCEDURE IDENTIFICADOR procParenParam tipoRetorno PUNTOYCOMA 
            {
              CabProcedure RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int procParenParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int procParenParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcParenParam procParenParam = (ProcParenParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoRetornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoRetornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoRetorno tipoRetorno = (TipoRetorno)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       checkSymbolDoesNotExists(identificador.getLexema());
                       addType(identificador.getLexema(), new TypeProcedure(getCurrentScope(), identificador.getLexema()));
                       SymbolIF symbol  = null;
                       RESULT = new CabProcedure(getCurrentScope(), identificador.getLexema(), procParenParam, tipoRetorno);
                       if(tipoRetorno.getIntOBool() != null) {//Is function
                            symbol = new SymbolFunction(getCurrentScope(), identificador.getLexema(),
                            RESULT, new TypeFunction(getCurrentScope()));
                       } else { //Is procedure
                            symbol = new SymbolProcedure(getCurrentScope(), identificador.getLexema(),
                            RESULT, new TypeProcedure(getCurrentScope()));
                       }
                       
                       addSymbol(identificador.getLexema(), symbol);

                       ScopeIF procedureScope = openScope(identificador.getLexema());

                          for(ProcParam procParam : procParenParam.getProcParams()){
                            if(procParam.getCadIdVar()!=null){
                              for(String identificadorParam : procParam.getCadIdVar().getIdentificadores()){
                                if(scopeManager.searchSymbol(identificadorParam)==null) {
                                  TypeIF type = scopeManager.searchType(procParam.getTipoVar().getIdentificadorTipo());
                                  SymbolParameter symbolParameter = new SymbolParameter(procedureScope, identificadorParam, type);
                                  procedureScope.getSymbolTable().addSymbol(symbolParameter);
                                }
                              }
                            }
                          }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabProcedure",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmSubprogram ::= 
            {
              StmSubprogram RESULT =null;
		
                   RESULT = new StmSubprogram();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmSubprogram",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmSubprogram ::= cabProcedure cuerpo stmSubprogram 
            {
              StmSubprogram RESULT =null;
		int cabProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cabProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CabProcedure cabProcedure = (CabProcedure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuerpo cuerpo = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmSubprogramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmSubprogramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmSubprogram stmSubprogram = (StmSubprogram)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  stmSubprogram.addCuerpoAndProcedure(cuerpo, cabProcedure);
                  RESULT = stmSubprogram;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmSubprogram",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoVar ::= IDENTIFICADOR 
            {
              TipoVar RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new TipoVar(identificador.getLexema());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipoVar ::= intOBool 
            {
              TipoVar RESULT =null;
		int intOBoolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intOBoolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntOBool intOBool = (IntOBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new TipoVar(intOBool);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cadIdVar ::= IDENTIFICADOR 
            {
              CadIdVar RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT =  new CadIdVar(identificador.getLexema());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadIdVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cadIdVar ::= IDENTIFICADOR COMA cadIdVar 
            {
              CadIdVar RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadIdVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadIdVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CadIdVar cadIdVar = (CadIdVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  cadIdVar.addIdentificador(identificador.getLexema());
                  RESULT = cadIdVar;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadIdVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expVar ::= cadIdVar DOSPUNTOS tipoVar PUNTOYCOMA 
            {
              ExpVar RESULT =null;
		int cadIdVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadIdVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CadIdVar cadIdVar = (CadIdVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoVar tipoVar = (TipoVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    for(String identificadorVariable : cadIdVar.getIdentificadores()) {
                        checkSymbolDoesNotExists(identificadorVariable);
                        SymbolIF symbolVariable = new SymbolVariable(getCurrentScope(), identificadorVariable, getType(tipoVar.getIdentificadorTipo()));
                        addSymbol(identificadorVariable, symbolVariable);
                    }
                   RESULT = new ExpVar(cadIdVar, tipoVar);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expVar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentVar ::= expVar 
            {
              SentVar RESULT =null;
		int expVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpVar expVar = (ExpVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new SentVar(expVar);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentVar ::= sentVar expVar 
            {
              SentVar RESULT =null;
		int sentVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentVar sentVar = (SentVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpVar expVar = (ExpVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     sentVar.addExpVar(expVar);
                     RESULT = sentVar;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmVar ::= 
            {
              StmVar RESULT =null;
		
                    RESULT = new StmVar();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmVar ::= VAR sentVar 
            {
              StmVar RESULT =null;
		int sentVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentVar sentVar = (SentVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new StmVar(sentVar);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expTipo ::= IDENTIFICADOR IGUAL ARRAY CORCHIZQ entOid PUNTOPUNTO entOid CORCHDER OF intOBool PUNTOYCOMA 
            {
              ExpTipo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int endOidIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int endOidIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EntOId endOidI = (EntOId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int endOiddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int endOiddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		EntOId endOidd = (EntOId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int intOBoolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int intOBoolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IntOBool intOBool = (IntOBool)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                      if(endOidI.getValue()!=null && endOidd.getValue()!=null && endOidI.getValue()>=endOidd.getValue()){
                           semanticErrorManager.semanticFatalError("Rango de array erroneo");
                      }

                       checkTypeDoesNotExists(identificador.getLexema());
                       ExpTipo expTipo = new ExpTipo(identificador.getLexema(), endOidI, endOidd, intOBool);
                       TypeIF type = new TypeArray(getCurrentScope(), identificador.getLexema(), expTipo);
                       addType(identificador.getLexema(), type);
                       RESULT = expTipo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentTipo ::= expTipo 
            {
              SentTipo RESULT =null;
		int expTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpTipo expTipo = (ExpTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new SentTipo(expTipo);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentTipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentTipo ::= sentTipo expTipo 
            {
              SentTipo RESULT =null;
		int sentTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentTipo sentTipo = (SentTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpTipo expTipo = (ExpTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    sentTipo.addExpTipo(expTipo);
                    RESULT = sentTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentTipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmTipos ::= 
            {
              StmTipos RESULT =null;
		
                    RESULT = new StmTipos();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmTipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmTipos ::= TYPE sentTipo 
            {
              StmTipos RESULT =null;
		int sentTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentTipo sentTipo = (SentTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = new StmTipos(sentTipo);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmTipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valorConst ::= vBooleano 
            {
              ValorConst RESULT =null;
		int vBooleanoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vBooleanoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VBooleano vBooleano = (VBooleano)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   ValorConst valorConst = new ValorConst(vBooleano.getValue());
                   RESULT = valorConst;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConst",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valorConst ::= ENTERO 
            {
              ValorConst RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   ValorConst valorConst = new ValorConst(Integer.parseInt(valor.getLexema()));
                   RESULT = valorConst;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConst",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expConst ::= IDENTIFICADOR IGUAL valorConst PUNTOYCOMA 
            {
              ExpConst RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValorConst valorConst = (ValorConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   String expConstIdentificador = identificador.getLexema();
                   checkSymbolDoesNotExists(expConstIdentificador);
                   SymbolConstant symbolConstant;
                   if(valorConst.isBoolean()) {
                      symbolConstant = new SymbolConstant(getCurrentScope(), expConstIdentificador, valorConst.getBoolean(), getType("boolean"));
                   } else {
                      symbolConstant = new SymbolConstant(getCurrentScope(), expConstIdentificador, valorConst.getValue(), getType("int"));
                   }
                   addSymbol(expConstIdentificador, symbolConstant);
                   ExpConst expConst = new ExpConst(expConstIdentificador, valorConst);
                   RESULT = expConst;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expConst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentConst ::= expConst 
            {
              SentConst RESULT =null;
		int expConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpConst expConst = (ExpConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new SentConst(expConst);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentConst",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentConst ::= sentConst expConst 
            {
              SentConst RESULT =null;
		int sentConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentConst sentConst = (SentConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpConst expConst = (ExpConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    sentConst.addExpConst(expConst);
                    RESULT = sentConst;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentConst",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmConstantes ::= 
            {
              StmConstantes RESULT =null;
		
                   RESULT = new StmConstantes();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmConstantes ::= CONST sentConst 
            {
              StmConstantes RESULT =null;
		int sentConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentConst sentConst = (SentConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = new StmConstantes(sentConst);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= stmConstantes stmTipos stmVar stmSubprogram BEGIN sentencias END IDENTIFICADOR PUNTOYCOMA 
            {
              Cuerpo RESULT =null;
		int stmConstantesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int stmConstantesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		StmConstantes stmConstantes = (StmConstantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int stmTiposleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int stmTiposright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		StmTipos stmTipos = (StmTipos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int stmVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int stmVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		StmVar stmVar = (StmVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stmSubprogramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stmSubprogramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		StmSubprogram stmSubprogram = (StmSubprogram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias sentencias = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                   Cuerpo cuerpo = new Cuerpo(stmConstantes, stmTipos, stmVar, stmSubprogram, sentencias);
                   //Código intermedio
                   TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
                  
                   IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
                   cb.addQuadruples(stmSubprogram.getIntermediateCode());
                   cb.addQuadruples(sentencias.getIntermediateCode());
                   cuerpo.setIntermediateCode(cb.create());
                   if (getCurrentScope().getLevel()!=0){
                     closeCurrentScope();
                   }
                   RESULT = cuerpo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cabModule ::= MODULE IDENTIFICADOR PUNTOYCOMA 
            {
              CabModule RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   ScopeIF mainScope = openScope(identificador.getLexema());
                   addType("boolean", new TypeSimple(getCurrentScope(), "boolean"));
                   addType("int", new TypeSimple(getCurrentScope(), "int"));
                   addType(identificador.getLexema(), new TypeProcedure(mainScope, identificador.getLexema()));
                   RESULT = new CabModule(identificador.getLexema());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabModule",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= cabModule cuerpo 
            {
              Axiom RESULT =null;
		int cabModuleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cabModuleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CabModule cabModule = (CabModule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuerpo cuerpo = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              Axiom axiom =  new AxiomImpl(cabModule, cuerpo);
              LabelFactoryIF labelFactory = new LabelFactory ();
              LabelIF label = labelFactory.create(cabModule.getIdentifier());
              
              axiom.setLabel(label);

              TypeIF type = scopeManager.searchType(cabModule.getIdentifier());
              if(getCurrentScope().getLevel()!=0){
                for (SymbolIF symbol : getCurrentScope().getSymbolTable().getSymbols()) {
                  ((TypeProcedure) type).incSize(symbol.getType().getSize());
                }
              }

              ((TypeProcedure) type).incSize(getCurrentScope().getTemporalTable().getTemporals().size());

              //Código intermedio
              boolean labelAdded = false;
              TemporalFactoryIF tf = new TemporalFactory(getCurrentScope());
              IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(getCurrentScope());
              LabelIF labelFin = labelFactory.create("F_MAIN");

              for (Sentencia procedure : cuerpo.getSentencias().getListSentencia().getSentenciaList()) {
                if(!labelAdded){
                    cb.addQuadruple("INL", label, 0);
                    labelAdded = true;
                } 
                cb.addQuadruples(procedure.getIntermediateCode());
              }
              cb.addQuadruple("BR", labelFin);
              cb.addQuadruples(cuerpo.getStmSubprogram().getIntermediateCode());
              cb.addQuadruple("INL", labelFin, 0);
              axiom.getIntermediateCode().addAll(cb.create());
              closeCurrentScope();
              RESULT = axiom;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			int globalAddress = 0;
      int globalOffset = 0;
      ScopeIF currentScope = null;
		  Map<String, SymbolProcedure> procedures = new HashMap<String, SymbolProcedure>();

			for (ScopeIF scope : scopeManager.getAllScopes()) {
        
        int scopeOffset = 0;
        int functionOffset = 1;
        boolean scopeGlobal = false;

        for(SymbolIF symbol : scope.getSymbolTable().getSymbols()) {
            if(symbol instanceof SymbolVariable) {
               SymbolVariable variableSymbol = (SymbolVariable)symbol;
               if (scope.getLevel() == 0) {
                variableSymbol.setAddress(globalAddress);
                globalAddress += variableSymbol.getType().getSize();
            } else {						
                variableSymbol.setAddress(functionOffset); // Ademas de la dir de retorno se reserva espacio para el estado y el enlace de control
                functionOffset += variableSymbol.getType().getSize();
                SymbolProcedure function = (SymbolProcedure) procedures.get(variableSymbol.getScope().getName());
                function.incrementSize(variableSymbol.getType().getSize());
                function.incrementTempSize(variableSymbol.getType().getSize());
                variableSymbol.setEnclosingSymbol(function);
              }
           } else if (symbol instanceof SymbolFunction) {
            procedures.put(symbol.getName(), (SymbolFunction)symbol);
          } else if (symbol instanceof SymbolProcedure) {
            procedures.put(symbol.getName(), (SymbolProcedure)symbol);
          } else if (symbol instanceof SymbolParameter) {
            SymbolParameter parametro = (SymbolParameter)symbol;
            parametro.setAddress(scopeOffset);
            scopeOffset += parametro.getType().getSize();
            SymbolProcedure function = (SymbolProcedure)procedures.get(parametro.getScope().getName());
            function.incrementSize(parametro.getType().getSize());
            parametro.setEnclosingSymbol(function);
          }

        }

        List<TemporalIF> temporalesAmbito = scope.getTemporalTable().getTemporals();
          for (TemporalIF t:temporalesAmbito) {
            if (scope.getLevel() == 0) {
              t.setAddress(scopeOffset);
              scopeOffset++;
            } else {
              t.setAddress(functionOffset);
              SymbolProcedure function = (SymbolProcedure)procedures.get(t.getScope().getName());
              function.incrementSize();
              ((Temporal)t).setEnclosingSymbol(function);
              function.incrementTempSize();
              functionOffset++;
            }
          }

          if (scope.getLevel() == 0) {
            currentScope = scope;
            globalOffset = scopeOffset;
          }
			}


        IntermediateCodeBuilder cb = new IntermediateCodeBuilder(currentScope);
		    LabelFactoryIF labelFactory = new LabelFactory ();

        cb.addQuadruple("DATA", null, globalAddress + globalOffset, globalAddress);		
	    	cb.addQuadruple("BR", ax.getLabel());
        cb.addQuadruples(ax.getIntermediateCode());
	    	cb.addQuadruple("HALT");

        finalCodeFactory.setEnvironment(new ExecutionEnvironmentEns2001()); 
        finalCodeFactory.create(cb.create());               
        
        syntaxErrorManager.syntaxInfo ("Codigo intermedio generado; \n  ");
        for (QuadrupleIF q:cb.create()) {
          syntaxErrorManager.syntaxInfo (q.toString());
        }
        syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

      syntaxErrorManager.syntaxInfo("Starting parsing...");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

