
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 12 21:05:17 CET 2017
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 12 21:05:17 CET 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\003\002\000\002\044" +
    "\002\000\002\002\014\000\002\004\006\000\002\007\004" +
    "\000\002\007\002\000\002\010\004\000\002\010\003\000" +
    "\002\011\006\000\002\011\006\000\002\012\004\000\002" +
    "\012\002\000\002\013\004\000\002\013\003\000\002\014" +
    "\016\000\002\015\004\000\002\015\002\000\002\016\004" +
    "\000\002\016\003\000\002\017\005\000\002\017\006\000" +
    "\002\017\006\000\002\020\004\000\002\020\002\000\002" +
    "\021\020\000\002\021\022\000\002\021\015\000\002\021" +
    "\023\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\006\000\002\022\007\000\002\005\004\000" +
    "\002\005\002\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\004\000\002\027\006\000\002\027\011\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\036\006\000\002" +
    "\032\005\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\031\005\000\002\031\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\004\000" +
    "\002\030\003\000\002\033\004\000\002\033\003\000\002" +
    "\033\005\000\002\033\005\000\002\023\006\000\002\024" +
    "\005\000\002\024\003\000\002\024\002\000\002\025\003" +
    "\000\002\025\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\042\014\000\002" +
    "\037\003\000\002\037\004\000\002\037\003\000\002\041" +
    "\007\000\002\040\007\000\002\043\010\000\002\043\012" +
    "\000\002\043\010\000\002\043\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\025\uffff\001\002\000\004\002\345\001" +
    "\002\000\004\025\006\001\002\000\004\012\007\001\002" +
    "\000\004\042\010\001\002\000\014\014\ufffb\016\011\031" +
    "\ufffb\034\ufffb\036\ufffb\001\002\000\004\012\336\001\002" +
    "\000\012\014\ufff5\031\ufff5\034\200\036\ufff5\001\002\000" +
    "\004\014\014\001\002\000\020\012\027\021\uffde\022\017" +
    "\023\024\037\021\040\033\041\022\001\002\000\024\012" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\032\uffda\037\uffda" +
    "\040\uffda\041\uffda\001\002\000\024\012\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\032\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\001\002\000\004\012\166\001\002\000\024\012\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\032\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\001\002\000\004\043\162\001\002\000\004\042" +
    "\161\001\002\000\024\012\027\020\uffde\021\uffde\022\017" +
    "\023\024\032\uffde\037\021\040\033\041\022\001\002\000" +
    "\016\006\037\007\041\010\060\012\135\026\047\043\044" +
    "\001\002\000\024\012\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\032\uffdc\037\uffdc\040\uffdc\041\uffdc\001\002\000\024" +
    "\012\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\032\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\001\002\000\012\042\123\043\071" +
    "\046\124\051\125\001\002\000\024\012\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\032\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\001\002\000\004\021\120\001\002\000\024\012\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\032\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\001\002\000\004\043\034\001\002\000\016\006" +
    "\037\007\041\010\051\012\045\026\047\043\044\001\002" +
    "\000\016\030\116\033\uffc4\042\uffc4\044\uffc4\045\uffc4\050" +
    "\uffc4\001\002\000\012\004\065\005\064\052\105\053\104" +
    "\001\002\000\020\012\uffb9\030\uffb9\033\uffb9\042\uffb9\044" +
    "\uffb9\045\uffb9\050\uffb9\001\002\000\014\033\uffd5\042\uffd5" +
    "\044\uffd5\045\uffd5\050\uffd5\001\002\000\020\012\uffb8\030" +
    "\uffb8\033\uffb8\042\uffb8\044\uffb8\045\uffb8\050\uffb8\001\002" +
    "\000\004\044\114\001\002\000\024\004\uffcd\005\uffcd\033" +
    "\uffd4\042\uffd4\044\uffd4\045\uffd4\050\uffd4\052\uffcd\053\uffcd" +
    "\001\002\000\016\006\037\007\041\010\060\012\077\026" +
    "\047\043\044\001\002\000\032\004\uffcb\005\uffcb\030\072" +
    "\033\uffd1\042\uffd1\043\071\044\uffd1\045\uffd1\046\070\050" +
    "\uffd1\052\uffcb\053\uffcb\001\002\000\014\033\uffd2\042\uffd2" +
    "\044\uffd2\045\uffd2\050\uffd2\001\002\000\014\006\037\007" +
    "\041\010\060\012\057\043\056\001\002\000\020\012\053" +
    "\030\uffc2\033\uffc2\042\uffc2\044\uffc2\045\uffc2\050\uffc2\001" +
    "\002\000\024\004\uffcc\005\uffcc\033\uffd0\042\uffd0\044\uffd0" +
    "\045\uffd0\050\uffd0\052\uffcc\053\uffcc\001\002\000\014\033" +
    "\uffd3\042\uffd3\044\uffd3\045\uffd3\050\uffd3\001\002\000\016" +
    "\030\uffc3\033\uffc3\042\uffc3\044\uffc3\045\uffc3\050\uffc3\001" +
    "\002\000\014\033\uffc5\042\uffc5\044\uffc5\045\uffc5\050\uffc5" +
    "\001\002\000\032\004\uffcd\005\uffcd\017\uffcd\030\uffcd\033" +
    "\uffcd\035\uffcd\042\uffcd\044\uffcd\045\uffcd\050\uffcd\052\uffcd" +
    "\053\uffcd\001\002\000\010\010\060\012\057\043\056\001" +
    "\002\000\032\004\uffcb\005\uffcb\017\uffcb\030\uffcb\033\uffcb" +
    "\035\uffcb\042\uffcb\044\uffcb\045\uffcb\050\uffcb\052\uffcb\053" +
    "\uffcb\001\002\000\032\004\uffcc\005\uffcc\017\uffcc\030\uffcc" +
    "\033\uffcc\035\uffcc\042\uffcc\044\uffcc\045\uffcc\050\uffcc\052" +
    "\uffcc\053\uffcc\001\002\000\006\004\065\005\064\001\002" +
    "\000\014\004\uffcd\005\uffcd\044\063\052\uffcd\053\uffcd\001" +
    "\002\000\032\004\uffce\005\uffce\017\uffce\030\uffce\033\uffce" +
    "\035\uffce\042\uffce\044\uffce\045\uffce\050\uffce\052\uffce\053" +
    "\uffce\001\002\000\010\010\060\012\057\043\056\001\002" +
    "\000\010\010\060\012\057\043\056\001\002\000\032\004" +
    "\uffca\005\uffca\017\uffca\030\uffca\033\uffca\035\uffca\042\uffca" +
    "\044\uffca\045\uffca\050\uffca\052\uffca\053\uffca\001\002\000" +
    "\032\004\uffc9\005\uffc9\017\uffc9\030\uffc9\033\uffc9\035\uffc9" +
    "\042\uffc9\044\uffc9\045\uffc9\050\uffc9\052\uffc9\053\uffc9\001" +
    "\002\000\016\006\037\007\041\010\051\012\045\026\047" +
    "\043\044\001\002\000\020\006\037\007\041\010\060\012" +
    "\077\026\047\043\044\044\uffbc\001\002\000\016\006\037" +
    "\007\041\010\051\012\045\026\047\043\044\001\002\000" +
    "\014\033\uffc7\042\uffc7\044\uffc7\045\uffc7\050\uffc7\001\002" +
    "\000\016\004\065\005\064\044\uffbb\050\uffbb\052\105\053" +
    "\104\001\002\000\006\044\uffbd\050\102\001\002\000\004" +
    "\044\101\001\002\000\020\004\uffcb\005\uffcb\030\072\044" +
    "\uffcb\050\uffcb\052\uffcb\053\uffcb\001\002\000\006\044\uffba" +
    "\050\uffba\001\002\000\036\012\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\032\uffbf\033\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\044\uffbf\045\uffbf\050\uffbf\001\002\000\020\006" +
    "\037\007\041\010\060\012\077\026\047\043\044\044\uffbc" +
    "\001\002\000\004\044\uffbe\001\002\000\010\010\060\012" +
    "\057\043\056\001\002\000\010\010\060\012\057\043\056" +
    "\001\002\000\022\004\065\005\064\030\uffc0\033\uffc0\042" +
    "\uffc0\044\uffc0\045\uffc0\050\uffc0\001\002\000\022\004\065" +
    "\005\064\030\uffc1\033\uffc1\042\uffc1\044\uffc1\045\uffc1\050" +
    "\uffc1\001\002\000\004\045\111\001\002\000\014\033\uffcf" +
    "\042\uffcf\044\uffcf\045\uffcf\050\uffcf\001\002\000\004\044" +
    "\113\001\002\000\014\033\uffc8\042\uffc8\044\uffc8\045\uffc8" +
    "\050\uffc8\001\002\000\004\042\115\001\002\000\024\012" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\032\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\001\002\000\014\006\037\007\041\010" +
    "\060\012\057\043\056\001\002\000\014\033\uffc6\042\uffc6" +
    "\044\uffc6\045\uffc6\050\uffc6\001\002\000\004\012\121\001" +
    "\002\000\004\042\122\001\002\000\004\002\ufffe\001\002" +
    "\000\024\012\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\032" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002\000\016\006\037" +
    "\007\041\010\051\012\045\026\047\043\044\001\002\000" +
    "\016\006\037\007\041\010\051\012\045\026\047\043\044" +
    "\001\002\000\004\042\127\001\002\000\024\012\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\032\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\001\002\000\004\045\131\001\002\000\004\051" +
    "\132\001\002\000\016\006\037\007\041\010\051\012\045" +
    "\026\047\043\044\001\002\000\004\042\134\001\002\000" +
    "\024\012\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\032\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\001\002\000\016\004\uffcb\005" +
    "\uffcb\030\072\043\071\052\uffcb\053\uffcb\001\002\000\004" +
    "\033\150\001\002\000\004\033\140\001\002\000\022\012" +
    "\027\020\uffde\021\uffde\022\017\023\024\037\021\040\033" +
    "\041\022\001\002\000\006\020\142\021\143\001\002\000" +
    "\020\012\027\021\uffde\022\017\023\024\037\021\040\033" +
    "\041\022\001\002\000\004\042\144\001\002\000\024\012" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\032\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\001\002\000\004\021\146\001\002\000" +
    "\004\042\147\001\002\000\024\012\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\032\uffae\037\uffae\040\uffae\041\uffae\001" +
    "\002\000\022\012\027\020\uffde\021\uffde\022\017\023\024" +
    "\037\021\040\033\041\022\001\002\000\006\020\152\021" +
    "\153\001\002\000\020\012\027\021\uffde\022\017\023\024" +
    "\037\021\040\033\041\022\001\002\000\004\042\154\001" +
    "\002\000\024\012\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\032\uffad\037\uffad\040\uffad\041\uffad\001\002\000\004\021" +
    "\156\001\002\000\004\042\157\001\002\000\024\012\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\032\uffac\037\uffac\040" +
    "\uffac\041\uffac\001\002\000\010\020\uffdf\021\uffdf\032\uffdf" +
    "\001\002\000\024\012\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\032\uffb3\037\uffb3\040\uffb3\041\uffb3\001\002\000\004" +
    "\011\163\001\002\000\004\044\164\001\002\000\004\042" +
    "\165\001\002\000\024\012\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\032\uffb1\037\uffb1\040\uffb1\041\uffb1\001\002\000" +
    "\004\051\167\001\002\000\010\010\060\012\057\043\056" +
    "\001\002\000\010\004\065\005\064\035\171\001\002\000" +
    "\010\010\060\012\057\043\056\001\002\000\010\004\065" +
    "\005\064\017\173\001\002\000\020\012\027\021\uffde\022" +
    "\017\023\024\037\021\040\033\041\022\001\002\000\004" +
    "\021\175\001\002\000\004\042\176\001\002\000\024\012" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\032\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\001\002\000\010\014\ufff0\031\ufff0\036" +
    "\222\001\002\000\004\012\203\001\002\000\010\014\ufff6" +
    "\031\ufff6\036\ufff6\001\002\000\012\012\203\014\ufff3\031" +
    "\ufff3\036\ufff3\001\002\000\004\052\204\001\002\000\004" +
    "\013\205\001\002\000\004\046\206\001\002\000\004\010" +
    "\207\001\002\000\004\054\210\001\002\000\004\054\211" +
    "\001\002\000\004\010\212\001\002\000\004\045\213\001" +
    "\002\000\004\027\214\001\002\000\006\015\217\024\216" +
    "\001\002\000\004\042\220\001\002\000\006\042\uffb7\044" +
    "\uffb7\001\002\000\006\042\uffb6\044\uffb6\001\002\000\012" +
    "\012\ufff2\014\ufff2\031\ufff2\036\ufff2\001\002\000\010\014" +
    "\ufff4\031\ufff4\036\ufff4\001\002\000\004\012\322\001\002" +
    "\000\006\014\uffe9\031\225\001\002\000\004\014\ufffd\001" +
    "\002\000\004\012\230\001\002\000\006\014\uffe9\031\225" +
    "\001\002\000\004\014\uffea\001\002\000\006\043\231\047" +
    "\232\001\002\000\006\012\246\044\250\001\002\000\006" +
    "\015\217\024\216\001\002\000\004\042\234\001\002\000" +
    "\014\014\ufffb\016\011\031\ufffb\034\ufffb\036\ufffb\001\002" +
    "\000\004\014\236\001\002\000\020\012\027\022\017\023" +
    "\024\032\uffde\037\021\040\033\041\022\001\002\000\004" +
    "\032\240\001\002\000\004\012\241\001\002\000\004\042" +
    "\242\001\002\000\004\021\243\001\002\000\004\012\244" +
    "\001\002\000\004\042\245\001\002\000\006\014\uffe8\031" +
    "\uffe8\001\002\000\010\047\312\050\311\051\313\001\002" +
    "\000\004\044\274\001\002\000\006\042\251\047\252\001" +
    "\002\000\014\014\ufffb\016\011\031\ufffb\034\ufffb\036\ufffb" +
    "\001\002\000\006\015\217\024\216\001\002\000\004\042" +
    "\254\001\002\000\014\014\ufffb\016\011\031\ufffb\034\ufffb" +
    "\036\ufffb\001\002\000\004\014\256\001\002\000\020\012" +
    "\027\022\017\023\024\032\uffde\037\021\040\033\041\022" +
    "\001\002\000\004\032\260\001\002\000\004\012\261\001" +
    "\002\000\004\042\262\001\002\000\004\021\263\001\002" +
    "\000\004\012\264\001\002\000\004\042\265\001\002\000" +
    "\006\014\uffe7\031\uffe7\001\002\000\004\014\267\001\002" +
    "\000\020\012\027\021\uffde\022\017\023\024\037\021\040" +
    "\033\041\022\001\002\000\004\021\271\001\002\000\004" +
    "\012\272\001\002\000\004\042\273\001\002\000\006\014" +
    "\uffe6\031\uffe6\001\002\000\004\047\275\001\002\000\006" +
    "\015\217\024\216\001\002\000\004\042\277\001\002\000" +
    "\014\014\ufffb\016\011\031\ufffb\034\ufffb\036\ufffb\001\002" +
    "\000\004\014\301\001\002\000\020\012\027\022\017\023" +
    "\024\032\uffde\037\021\040\033\041\022\001\002\000\004" +
    "\032\303\001\002\000\004\012\304\001\002\000\004\042" +
    "\305\001\002\000\004\021\306\001\002\000\004\012\307" +
    "\001\002\000\004\042\310\001\002\000\006\014\uffe5\031" +
    "\uffe5\001\002\000\004\012\246\001\002\000\006\015\217" +
    "\024\216\001\002\000\004\012\314\001\002\000\004\044" +
    "\uffe2\001\002\000\006\042\316\044\uffe3\001\002\000\006" +
    "\012\246\044\uffe1\001\002\000\004\044\uffe0\001\002\000" +
    "\004\044\uffe4\001\002\000\010\012\322\014\uffee\031\uffee" +
    "\001\002\000\006\047\325\050\324\001\002\000\006\014" +
    "\ufff1\031\ufff1\001\002\000\004\012\322\001\002\000\010" +
    "\012\327\015\217\024\216\001\002\000\004\042\331\001" +
    "\002\000\004\042\330\001\002\000\010\012\uffeb\014\uffeb" +
    "\031\uffeb\001\002\000\010\012\uffec\014\uffec\031\uffec\001" +
    "\002\000\010\012\uffed\014\uffed\031\uffed\001\002\000\006" +
    "\014\uffef\031\uffef\001\002\000\012\014\ufffc\031\ufffc\034" +
    "\ufffc\036\ufffc\001\002\000\014\012\336\014\ufff9\031\ufff9" +
    "\034\ufff9\036\ufff9\001\002\000\004\052\337\001\002\000" +
    "\010\006\037\007\041\010\340\001\002\000\004\042\343" +
    "\001\002\000\004\042\342\001\002\000\014\012\ufff7\014" +
    "\ufff7\031\ufff7\034\ufff7\036\ufff7\001\002\000\014\012\ufff8" +
    "\014\ufff8\031\ufff8\034\ufff8\036\ufff8\001\002\000\012\014" +
    "\ufffa\031\ufffa\034\ufffa\036\ufffa\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\002\003\044\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\012\007\011\001\001\000\006\010\333\011" +
    "\334\001\001\000\004\012\176\001\001\000\002\001\001" +
    "\000\024\005\030\006\022\023\027\027\015\037\017\040" +
    "\031\041\025\042\024\043\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\157\006\022" +
    "\023\027\027\015\037\017\040\031\041\025\042\024\043" +
    "\014\001\001\000\016\023\135\030\136\031\054\032\035" +
    "\033\034\034\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\023\045\026" +
    "\041\030\051\031\042\032\035\033\034\034\047\036\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\030\111\031\061\032\035\033" +
    "\034\034\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\031\054\032\035\033\053\034\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\061\032\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\054\032\066\001\001\000\006\031\054\032\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\023" +
    "\045\026\107\030\051\031\042\032\035\033\034\034\047" +
    "\036\037\001\001\000\020\024\075\025\074\030\077\031" +
    "\054\032\073\033\034\034\047\001\001\000\022\023\045" +
    "\026\072\030\051\031\042\032\035\033\034\034\047\036" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\024\102\025\074\030\077" +
    "\031\054\032\073\033\034\034\047\001\001\000\002\001" +
    "\001\000\006\031\054\032\106\001\001\000\006\031\054" +
    "\032\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\054\032\035\033\116\034\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\023\045\026\127\030\051\031\042" +
    "\032\035\033\034\034\047\036\037\001\001\000\022\023" +
    "\045\026\125\030\051\031\042\032\035\033\034\034\047" +
    "\036\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\023\045\026\132" +
    "\030\051\031\042\032\035\033\034\034\047\036\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\140\006" +
    "\022\023\027\027\015\037\017\040\031\041\025\042\024" +
    "\043\014\001\001\000\002\001\001\000\024\005\144\006" +
    "\022\023\027\027\015\037\017\040\031\041\025\042\024" +
    "\043\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\150\006\022\023\027\027\015\037\017\040\031\041" +
    "\025\042\024\043\014\001\001\000\002\001\001\000\024" +
    "\005\154\006\022\023\027\027\015\037\017\040\031\041" +
    "\025\042\024\043\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\054\032\167\001\001\000\002" +
    "\001\001\000\006\031\054\032\171\001\001\000\002\001" +
    "\001\000\024\005\173\006\022\023\027\027\015\037\017" +
    "\040\031\041\025\042\024\043\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\222" +
    "\001\001\000\006\013\200\014\201\001\001\000\002\001" +
    "\001\000\006\013\220\014\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\322\017\320\001" +
    "\001\000\006\020\223\021\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\226\021\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\246\001\001" +
    "\000\004\035\232\001\001\000\002\001\001\000\006\004" +
    "\234\007\011\001\001\000\002\001\001\000\024\005\236" +
    "\006\022\023\027\027\015\037\017\040\031\041\025\042" +
    "\024\043\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\265\007\011\001" +
    "\001\000\004\035\252\001\001\000\002\001\001\000\006" +
    "\004\254\007\011\001\001\000\002\001\001\000\024\005" +
    "\256\006\022\023\027\027\015\037\017\040\031\041\025" +
    "\042\024\043\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\267\006\022\023\027\027\015\037\017\040\031" +
    "\041\025\042\024\043\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\275\001\001\000\002\001\001\000" +
    "\006\004\277\007\011\001\001\000\002\001\001\000\024" +
    "\005\301\006\022\023\027\027\015\037\017\040\031\041" +
    "\025\042\024\043\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\317" +
    "\001\001\000\004\035\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\332\017" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\331\001\001\000\004\035\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\343\011\334\001\001\000\002\001\001\000\004" +
    "\034\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if ::= IF procedureCall THEN sentences ELSE sentences END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if ::= IF procedureCall THEN sentences END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if ::= IF boolean THEN sentences ELSE sentences END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // if ::= IF boolean THEN sentences END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // writeInt ::= WRITEINT LEFT_PAREN expression RIGHT_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeInt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // writeString ::= WRITESTRING LEFT_PAREN LITERAL_STRING RIGHT_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeString",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IO ::= writeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IO ::= WRITELN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IO ::= writeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for ::= FOR IDENTIFIER COLON_EQUAL arithmeticValue TO arithmeticValue DO sentences END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // pritimiveTypes ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pritimiveTypes",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // pritimiveTypes ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pritimiveTypes",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // booleanValue ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanValue",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // booleanValue ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanValue",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // procedureArg ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureArg",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // procedureArg ::= arithmeticValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureArg",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // procedureCallArgs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCallArgs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // procedureCallArgs ::= procedureArg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCallArgs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // procedureCallArgs ::= procedureArg COMMA procedureCallArgs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCallArgs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // procedureCall ::= IDENTIFIER LEFT_PAREN procedureCallArgs RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCall",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // booleanExpression ::= arithmeticValue EQUALS arithmeticValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // booleanExpression ::= arithmeticValue BIGGER_THAN arithmeticValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // booleanExpression ::= booleanValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // booleanExpression ::= booleanValue IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // boolean ::= booleanExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // boolean ::= NOT booleanExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // boolean ::= booleanExpression OR booleanExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // boolean ::= IDENTIFIER OR expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // boolean ::= LEFT_PAREN boolean RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arithmetic ::= arithmeticValue MULT arithmeticValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arithmetic ::= arithmeticValue MINUS arithmeticValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arithmeticValue ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticValue",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arithmeticValue ::= DIGITS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticValue",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arithmeticValue ::= arithmetic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticValue",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arithmeticValue ::= LEFT_PAREN arithmetic RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticValue",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // vectorValue ::= IDENTIFIER LEFT_BRACK expression RIGHT_BRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vectorValue",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= DIGITS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= procedureCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= arithmetic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= vectorValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignation ::= IDENTIFIER LEFT_BRACK expression RIGHT_BRACK COLON_EQUAL expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignation ::= IDENTIFIER COLON_EQUAL expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentence ::= IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentence ::= procedureCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentence ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentence ::= IO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentence ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentence ::= assignation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentences ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentences ::= sentence sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedureArguments ::= IDENTIFIER COLON pritimiveTypes SEMICOLON procedureArguments 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureArguments",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedureArguments ::= IDENTIFIER COLON pritimiveTypes SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureArguments",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procedureArguments ::= IDENTIFIER COLON_EQUAL IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureArguments",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // procedureArguments ::= IDENTIFIER COLON pritimiveTypes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureArguments",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procedureArguments ::= IDENTIFIER COMMA procedureArguments 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureArguments",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procedure ::= PROCEDURE IDENTIFIER LEFT_PAREN procedureArguments RIGHT_PAREN COLON pritimiveTypes SEMICOLON declarations BEGIN sentences RETURN IDENTIFIER SEMICOLON END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedure ::= PROCEDURE IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON declarations BEGIN sentences END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedure ::= PROCEDURE IDENTIFIER LEFT_PAREN RIGHT_PAREN COLON pritimiveTypes SEMICOLON declarations BEGIN sentences RETURN IDENTIFIER SEMICOLON END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedure ::= PROCEDURE IDENTIFIER COLON pritimiveTypes SEMICOLON declarations BEGIN sentences RETURN IDENTIFIER SEMICOLON END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // proceduresDeclaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proceduresDeclaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proceduresDeclaration ::= procedure proceduresDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proceduresDeclaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var ::= IDENTIFIER COLON IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var ::= IDENTIFIER COLON pritimiveTypes SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var ::= IDENTIFIER COMMA var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vars ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vars ::= var vars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varsDeclaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varsDeclaration ::= VAR vars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= IDENTIFIER EQUALS ARRAY LEFT_BRACK DIGITS POINT POINT DIGITS RIGHT_BRACK OF pritimiveTypes SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // types ::= type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // types ::= type types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // typesDeclaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typesDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // typesDeclaration ::= TYPE types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typesDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constant ::= IDENTIFIER EQUALS booleanValue SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= IDENTIFIER EQUALS DIGITS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constants ::= constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constants ::= constant constants 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constantsDeclaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantsDeclaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constantsDeclaration ::= CONST constants 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantsDeclaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= constantsDeclaration typesDeclaration varsDeclaration proceduresDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= NT$0 MODULE IDENTIFIER SEMICOLON declarations BEGIN sentences END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
 
				syntaxErrorManager.syntaxInfo("Starting parsing..."); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // axiom ::= 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

